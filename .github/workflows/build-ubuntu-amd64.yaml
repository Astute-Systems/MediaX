name: "Build Ubuntu Intel"

on:
  push:
    branches: main
  pull_request:
    branches: main

permissions:
  contents: read
  pull-requests: read

jobs:
  build-ubuntu-cyclone:
    runs-on: ubuntu-22.04

    # Map a step output to a job output
    outputs:
      package_name: ${{ steps.package.outputs.DEB_PACKAGE }}
    steps:
      - uses: actions/checkout@v3
      - name: Apt Update
        run: sudo apt-get update

      - name: Apt Install
        run: |
          sudo apt-get --no-install-recommends install libswscale cmake g++ 

      - name: CMake and Build
        run: mkdir build && cd build && cmake .. && make -j $(nproc)

      - name: Install
        run: mkdir build && cd build && make install

      - name: Post
        run: cd .. && bash <(curl -s https://codecov.io/bash)

      - name: Archive packaged .deb
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.DEB_PACKAGE }}
          path: build/${{ env.DEB_PACKAGE }}
          retention-days: 30

      - name: Archive logs
        if: ${{ always() && !cancelled() }}
        uses: actions/upload-artifact@v3
        with:
          name: build-logs
          path: |
            build/_CPack_Packages/Linux/RPM/PreinstallOutput.log
            build/compile_commands.json
            build/external/libnmea/build/CMakeFiles/CMakeOutput.log
            build/external/cyclonedds/build/CMakeFiles/CMakeOutput.log
            build/external/cyclonedds-cxx/build/CMakeFiles/CMakeOutput.log
            build/CMakeFiles/CMakeOutput.log
          retention-days: 30

  install-ubuntu-cyclone:
    runs-on: ubuntu-22.04
    needs: [build-ubuntu-cyclone]
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}

    steps:
      - name: Read package name
        run: echo ${{needs.build-ubuntu-cyclone.outputs.package_name}}

      - name: Download .deb to install
        uses: actions/download-artifact@v3
        with:
          name: ${{needs.build-ubuntu-cyclone.outputs.package_name}}

      - name: Install package
        run: ls -hal && sudo apt-get install ./*.deb -y

      - name: Run binary
        run: /opt/gva/hmi/hmi-display -h
